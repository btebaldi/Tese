#include <oxstd.oxh>
#import <packages/PcGive/pcgive_ects>

ProcessoH(const asParamNames, const vParamValues, const iQtdLags)
{
	println("Processo H iniciado");

	decl mRet, varMacro, nCont1, nCont2;
  	varMacro = {"Selic", "IPCA", "PIM"};

	//mRet = zeros(rows(varMacro), varMacro(varMacro)*iQtdLags);
	mRet = zeros(rows(varMacro), rows(varMacro));
	println(mRet);
	
	for(nCont1=0; nCont1 < rows(varMacro); ++nCont1)
	{
		for(nCont2=0; nCont2 < rows(varMacro); ++nCont2)
		{
			println(varMacro[nCont1], "-", nCont2);
		}
	}

	return 0;
}

main()
{

	//decl , sVarSufix, txMatPathRawMatrix, txMatPathA_Matrix, txMatPathW_Matrix, txDbaseMacroVariables;
	decl iQtdVarDependente, iQtdLags, iQtdRegioes, txDbase, txCoIntMatPath, txMatPathRawMatrix, txMatPathA_Matrix, txMatPathW_Matrix, txDbaseMacroVariables;
		
	decl mX, mX_Adm, mX_Des, mB, nCont, aMacroVarNames, sMacroVarNames, beta, database, mMacroData;

	
	iQtdVarDependente = 2; // NAO MUDAR ISSO !!! (SE MUDAR FAZER REVISAO DO CODIGO)
	iQtdLags = 2;
	iQtdRegioes = 5; // Isso devia vir de um arquivo e configuracao!!!

	// Configuracao dos diretorios
	// txMatPath = "./mat_files/";
	txMatPathRawMatrix = "./mat_files/RawMatrix/";
	txMatPathA_Matrix = "./mat_files/A_Matrix/";
	txMatPathW_Matrix = "./mat_files/W_Matrix/";
	txCoIntMatPath = "./mat_files/Cointegration/";
	txDbase = "../Database/GrandeRegiao.in7";
	txDbaseMacroVariables = "../Database/MacroVariables.xlsx";





	println("*** Inicio da estimacao do modelo de macrovariaveis");
	// print Headder
	println("\n\n*****************************************");	
	println("             Macrovariaveis ");	
	println("*****************************************\n\n");	


	println("Carregando dados das variaveis exogenas");


	println("Carregando base de dados com informacoes regionais");
	database = new Database();
	database.Load(txDbase);
	
	println("Construindo variaveis X_Adm e X_Des");
	// CONTRUCAO DAS VARIAVEIS DELTA
	for(nCont=1; nCont <= iQtdRegioes; ++nCont)
	{
		if(nCont==1)
		{
			mX_Des = database.GetVar(sprint("R", nCont, "_Desligados"));
			mX_Adm = database.GetVar(sprint("R", nCont, "_Admitidos"));
		}
		else
		{
			mX_Des = mX_Des ~ database.GetVar(sprint("R", nCont, "_Desligados"));
			mX_Adm = mX_Adm ~ database.GetVar(sprint("R", nCont, "_Admitidos"));
		}

		//println("mX_Des: ", mX_Des);
	}
	
	println("Concluido construcao das variaveis X_Adm e X_Des");

	println("Construindo vetor B");
	mB = ones(1, columns(mX_Adm)) ~ -1*ones(1, columns(mX_Des));

	mX = (mX_Adm ~ mX_Des) * mB';
	//println(mX);
	delete database;


	// Inicio um nomo objeto do tipo PcGive
	println("Inicio um nomo objeto do tipo PcGive referente a macrovariaveis");	
	decl model = new PcGive();

	println("Carregando base de dados de macrovariaveis");
	model.Load(txDbaseMacroVariables);
	
	println("Iniciando construcao da variavel Delta para variaveis");
	aMacroVarNames = model.GetAllNames();
	
	for(nCont=1; nCont < rows(aMacroVarNames); ++nCont)
	{
		println("Adicionado lag da variavel: ", aMacroVarNames[nCont]);
		model.Append(diff(model.GetVar(aMacroVarNames[nCont])), {sprint("D_", aMacroVarNames[nCont])});
   	}

	println(mX);
	println("Adicionando variavel mX ");	
	model.Append(mX, {"mX"});
	println("Adicionando variavel D_mX ");	
	model.Append(diff(mX), {"D_mX"});

	// Leitura do vetor de cointegracao
	beta = loadmat(sprint(txCoIntMatPath, sprint("CoInt_MacroVar.mat")));
   	mMacroData = model.GetVar({"Selic", "IPCA", "PIM"});
	model.Append(mMacroData*beta', {"betaMacro"});
	

	model.SetModelClass("SYSTEM");
	  	
	// Deseleciona as variaveis
	model.DeSelect();

	model.Deterministic(3);
	
	// adiciona variavel dependente
	model.Select("Y", {"D_Selic", 0, 0});
	model.Select("Y", {"D_IPCA", 0, 0});
	model.Select("Y", {"D_PIM", 0, 0});
	
	// adiciona a variavel dependente (lag da independente)
	model.Select("X", {"D_Selic", 1, iQtdLags});
	model.Select("X", {"D_IPCA", 1, iQtdLags});
	model.Select("X", {"D_PIM", 1, iQtdLags});

	// Adiciona a variavel "star"
	model.Select("X", {"D_mX", 0, iQtdLags});

	// Adiciona a variavel "betaMacro" com um lag apenas (representação da matriz de longo prazo)
	model.Select("X", {"betaMacro", 1, 1});
	model.Select("X", {"betaMacro", 1, 1});

	// Adiciona variaveis constante e sesonals
	model.Select("U", {"Constant", 0, 0});
	model.Select("U", {"CSeasonal", 0, 10});
		
	// determina a janela de tempo do modelo
	model.SetSample(2004,1 ,2016, 12);

	// Liga o autometrics
	model.Autometrics(0.05, "IIS", 1);
	model.AutometricsSet("print", 0);
		
	// determina o metodo de estimacao.
	model.SetMethod(M_OLS);

	// Realiza a estimacao do modelo
	model.Estimate();

	decl iTotalParam, asParamNames, vParamValues;
	
	// inicializa o total de parametros
	iTotalParam = model.GetParCount();

	// inicializa um vetor com o nome dos parametros
	asParamNames = model.GetParNames();

	// inicializa um vetor com o valor dos parametros
	vParamValues = model.GetPar();

	// A FAZER:
	//(1) Leitura dos valores de H
	decl mH;
	mH = ProcessoH(asParamNames, vParamValues, iQtdLags);
	//savemat(sprint(txMatPathRawMatrix, sVarSufix, "R", iCont, "_D.mat"), mD_macro);
	delete mH;
	
	//(2) Leitura dos valores de U + Cesonal
	//(3) Leitura dos valores de IIS
	//(4) Leitura dos valores do vetor de cointegracao
	//(5) Leitura dos valores d
	
	// const iValue, const sName, const iRegDependente, const sVarSufix, const aMacroVarNames
	//mD_macro = ProcessoMacroVariables(vParamValues, asParamNames, iQtdLags, iCont, sprint(sVarSufix, "R"), sVarSufix, aMacroVarNames);
	//savemat(sprint(txMatPathRawMatrix, sVarSufix, "R", iCont, "_D.mat"), mD_macro);
		

	delete iTotalParam, asParamNames, vParamValues;


	
	delete model;
}


